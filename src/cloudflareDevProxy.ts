import { Manifest, type Plugin } from 'vite'
import { Bindings } from 'worktop/cfw'

import type { WorkerModule } from './_worker' // my app is here, it calls env.ASSETS.fetch(request);
import { fromNodeRequest, toNodeRequest } from './utilities/nodeAdapter'

type Options = object

export let cloudflareDevProxy = <Env, Cloudflare extends CfProperties>(
  options?: Options,
): Plugin => {
  return {
    name: 'cloudflareDevProxy',
    config: () => ({
      ssr: {
        resolve: {
          externalConditions: ['workerd', 'worker'],
        },
        target: 'node',
        noExternal: [
          'react-helmet-async',
          '@apollo/client',
          'react-router-dom',
          'react-select',
        ],
      },
    }),
    configureServer: async (vite) => {
      let { getPlatformProxy } = await import('wrangler')
      let cloudflareProxy = await getPlatformProxy<Env, Cloudflare>(options)
      let bindings = cloudflareProxy.env as Bindings

      bindings.ASSETS = {
        fetch: async (input: RequestInfo | URL) => {
          if (typeof input === 'string') {
            // console.log('ASSETS.fetch', input)
            if (input === '/.vite/manifest.json') {
              let assets = createDevManifest()

              return new Response(JSON.stringify(assets), {
                headers: { 'Content-Type': 'application/json' },
              })
            }
          } else if (typeof input === 'object' && 'url' in input) {
            // Mimick how Cloudflare fetches static assets
            // https://developers.cloudflare.com/pages/functions/api-reference/#envassetsfetch
            let url = new URL(input.url)
            let assetPath = url.pathname.replace('/assets/', '')
            // console.log('ASSETS.fetch', assetPath)

            let result = await vite.transformRequest(assetPath)

            // When fetching this file "src/entry.client.tsx"
            // Vite logs an error:
            // "Pre-transform error: Failed to load url /assets/src/entry.client.tsx (resolved id: /assets/src/entry.client.tsx). Does the file exist?"
            // But the file is actually loaded by the browser. Why does error get logged?

            return new Response(result?.code, {
              headers: { 'Content-Type': 'application/javascript' },
            })
          }

          return new Response()
        },
      }

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      bindings.VITE = vite as any

      return () => {
        if (!vite.config.server.middlewareMode) {
          vite.middlewares.use(async (nodeReq, nodeRes, next) => {
            try {
              let build = await vite.ssrLoadModule('/src/_worker', {
                fixStacktrace: true,
              })
              let handler = build.default.fetch as WorkerModule['fetch']
              let req = fromNodeRequest(nodeReq)

              let context = {
                bindings,
                waitUntil: () => {},
                passThroughOnException: () => {},
              }
              let res = await handler(req, bindings, context)

              await toNodeRequest(res, nodeRes)
            } catch (error) {
              next(error)
            }
          })
        }
      }
    },
  }
}

function createDevManifest(): Manifest {
  // Hardcoded for now
  // Mimicks the manifest that would be generated by Vite
  // https://vitejs.dev/guide/backend-integration
  return {
    'src/entry.client.tsx': {
      file: 'assets/src/entry.client.tsx',
    },
  }
}
